enclave {

    include "sgx_tcrypto.h"
    include "sgx_tseal.h"

    trusted {
        public sgx_status_t generate_new_keypair(
            [out, size=compressed_server_pubkey_size] unsigned char *compressed_server_pubkey, 
            size_t compressed_server_pubkey_size, 
            [out, size=sealedkeypair_size] char* sealedkeypair, 
            size_t sealedkeypair_size);

        public sgx_status_t unseal(
            [in, size=sealed_size] char* sealed, size_t sealed_size,
            [out, size=raw_data_size] unsigned char *raw_data, size_t raw_data_size);

        public sgx_status_t partial_signature(
            [in, size=serialized_client_pubnonce_size] unsigned char* serialized_client_pubnonce, size_t serialized_client_pubnonce_size,
            [in, size=msg_size] unsigned char* msg, size_t msg_size,
            [in, size=sealed_keypair_size] char* sealed_keypair, size_t sealed_keypair_size,
            [in, size=keyagg_cache_data_size] unsigned char* keyagg_cache_data, size_t keyagg_cache_data_size,
            [out, size=partial_sig_data_size] unsigned char *partial_sig_data, size_t partial_sig_data_size,
            [out, size=server_pubnonce_data_size] unsigned char* server_pubnonce_data, size_t server_pubnonce_data_size); 

        public sgx_status_t generate_nonce(
            [in, size=sealed_keypair_size] char* sealed_keypair, size_t sealed_keypair_size,
            [out, size=sealed_secnonce_size] char* sealed_secnonce, size_t sealed_secnonce_size,
            [out, size=server_pubnonce_data_size] unsigned char* server_pubnonce_data, size_t server_pubnonce_data_size);

        public sgx_status_t get_partial_signature(
            [in, size=sealed_keypair_size] char* sealed_keypair, size_t sealed_keypair_size,
            [in, size=sealed_secnonce_size] char* sealed_secnonce, size_t sealed_secnonce_size,
            [in, size=keyaggcoef_size] unsigned char* keyaggcoef, size_t keyaggcoef_size,
            int negate_seckey,
            [in, size=session_data_size] unsigned char* session_data, size_t session_data_size,
            [in, size=serialized_server_pubnonce_size] unsigned char* serialized_server_pubnonce, size_t serialized_server_pubnonce_size,
            [out, size=partial_sig_data_size] unsigned char *partial_sig_data, size_t partial_sig_data_size
        );
    };

    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_print_int([in, string] const char *str, [in] const int *number);
        void ocall_print_hex([in] const unsigned char** key, [in] const int *keylen);
    };

};
